<? docfiles.forEach(function(doc) { -?>
  <!--
    Start <?= doc.filename ?>

    GENERATED FROM SOURCE
    if you edit this doc directly your changes will be lost
  -->

  <?

    // comments of certain types will be grouped together and an index will
    // be built linking to them
    var index = {};
    // need an array because object key order is not to be trusted
    var indexTypes = ['method', 'property', 'event'];
    var plurals = {
      'method': 'methods',
      'property': 'properties',
      'event': 'events',
      'class': 'classes'
    };

    // class comments will come first
    var classes = [];
    // followed by anthing we're not handling specifically
    var others = [];

    doc.javadoc.forEach(function(comment){
      if (comment.ignore) return;

      if (comment.type === 'class') {
        classes.push(comment);
      } else if (indexTypes.indexOf(comment.type) !== -1) {
        index[comment.type] = index[comment.type] || [];
        index[comment.type].push(comment);
      } else {
        others.push(comment);
      }
    });

    // we're really assuming there should be only one class per file
    // and that should come first in the docs
    classes.forEach(function(comment){
      parseComment(comment);
    });

    // others.forEach(function(comment){
    //   parseComment(comment);
    // });
  ?>

  ## INDEX

  <? indexTypes.forEach(function(type){ ?>
    <? if (index[type] && index[type].length > 0) { ?>
      - [<?= plurals[type].toUpperCase() ?>](#<?= plurals[type] ?>)
      <? index[type].forEach(function(comment){ -?>
        <?= '  ' ?>- [<?= comment.name ?>](<?= '#'+comment.nameTarget ?>)
      <? }) -?>
    <? } ?>
  <? }) ?>

  <? indexTypes.forEach(function(type){ ?>
    <? if (index[type] && index[type].length > 0) { ?>
      ## <?= plurals[type].toUpperCase() ?>

      <? index[type].forEach(function(comment){ -?>
        <? parseComment(comment) ?>
      <? }) -?>
    <? } ?>
  <? }) ?>

  <? function parseComment(comment) { ?>
    <? if (comment.name) { ?>
      <? if (comment.isMethod || comment.isFunction) { -?>
        ### <?= comment.nameWithParams ?>
      <? } else if (comment.isClass) { -?>
        # <?= comment.raw.ctx.string ?>

        <? if (comment.extends) { -?>
          __EXTENDS__: [<?= comment.extends ?>](<?= comment.ancestorName.toLowerCase() ?>.md)<?= '  ' ?>
        <? } -?>
        __DEFINED IN__: [<?= doc.filename ?>](https://github.com/videojs/video.js/blob/master/<?= doc.filename ?>)

      <? } else { -?>
        ### <?= comment.name ?>
      <? } -?>
    <? } else { -?>
      ### No Comment Name
    <? } -?>
    <?= comment.description ?>

    <? if (comment.deprecated) { ?>
      **Deprecated**
    <? } ?>
    <? if (comment.see) { ?>
      **See**: <?= comment.see ?>
    <? } ?>

    <? if (comment.paramTags.length > 0) { ?>
      ##### PARAMETERS:
      <? comment.paramTags.forEach(function(paramTag) { -?>
        * __<?= paramTag.name.replace(/[\[|\]]/g, '') ?>__ `<?= paramTag.joinedTypes -?>`
        <? if (paramTag.optional) { ?> _(Optional)_<? } -?>
        <?= ' ' + paramTag.description ?>
      <? }) ?>
    <? } ?>

    <? if (comment.returnTags.length > 0) { ?>
      ##### RETURNS:
      <? comment.returnTags.forEach(function(returnTag) { -?>
        * `<?= returnTag.joinedTypes ?>` <?= returnTag.description ?>
      <? }) -?>
    <? } ?>

    <?
      // can't track line numbers through dox so this isn't valuable yet
      // _defined in_:
    ?>

    ---

  <? } ?>

  <!-- End <?= doc.filename ?> -->
<? }) ?>
