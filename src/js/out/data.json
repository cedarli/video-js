{
    "project": {},
    "files": {
        "control-bar/control-bar.js": {
            "name": "control-bar/control-bar.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "control-bar/fullscreen-toggle.js": {
            "name": "control-bar/fullscreen-toggle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "control-bar/mute-toggle.js": {
            "name": "control-bar/mute-toggle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "control-bar/play-toggle.js": {
            "name": "control-bar/play-toggle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "control-bar/progress-control.js": {
            "name": "control-bar/progress-control.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "control-bar/time-display.js": {
            "name": "control-bar/time-display.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "control-bar/volume-control.js": {
            "name": "control-bar/volume-control.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "control-bar/volume-menu-button.js": {
            "name": "control-bar/volume-menu-button.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "media/flash.externs.js": {
            "name": "media/flash.externs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "media/flash.js": {
            "name": "media/flash.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "media/html5.js": {
            "name": "media/html5.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "media/loader.js": {
            "name": "media/loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "media/media.js": {
            "name": "media/media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "big-play-button.js": {
            "name": "big-play-button.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "button.js": {
            "name": "button.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "cdn.js": {
            "name": "cdn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "component.js": {
            "name": "component.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core-object.js": {
            "name": "core-object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core.js": {
            "name": "core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "events.js": {
            "name": "events.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "exports.js": {
            "name": "exports.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "json.js": {
            "name": "json.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib.js": {
            "name": "lib.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "loading-spinner.js": {
            "name": "loading-spinner.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "menu.js": {
            "name": "menu.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "player.js": {
            "name": "player.js",
            "modules": {},
            "classes": {
                "": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "poster.js": {
            "name": "poster.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "setup.js": {
            "name": "setup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "slider.js": {
            "name": "slider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tracks.js": {
            "name": "tracks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "": {
            "file": "player.js",
            "line": 1,
            "description": "An instance of the `Video.Player` class is created when any of the Video.js setup methods are used to initialize a video.\n\n```js\nvar myPlayer = Video('example_video_1');\n```\n\nIn the follwing example, the `data-setup` attribute tells the Video.js library to create a player instance when the library is ready.\n\n```html\n<video id=\"example_video_1\" data-setup='{}' controls>\n  <source src=\"my-source.mp4\" type=\"video/mp4\">\n</video>\n```\n\nAfter an instance has been created it can be accessed globally using `Video('example_video_1')`.",
            "extends": "vjs.Component"
        }
    },
    "classitems": [
        {
            "file": "control-bar/control-bar.js",
            "line": 1,
            "description": "Container of main controls",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/fullscreen-toggle.js",
            "line": 1,
            "description": "Toggle fullscreen video",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/fullscreen-toggle.js",
            "line": 8,
            "class": ""
        },
        {
            "file": "control-bar/mute-toggle.js",
            "line": 1,
            "description": "Mute the audio",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/mute-toggle.js",
            "line": 8,
            "class": ""
        },
        {
            "file": "control-bar/play-toggle.js",
            "line": 1,
            "description": "Button to toggle between play and pause",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/play-toggle.js",
            "line": 8,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 1,
            "description": "Seek, Load Progress, and Play Progress",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 8,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 26,
            "description": "Seek Bar and holder for the progress bars",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 33,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 108,
            "description": "Shows load progres",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 115,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 134,
            "description": "Shows play progress",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 141,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 154,
            "description": "SeekBar component includes play progress bar, and seek handle\nNeeded so it can determine seek position based on handle position/size",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 163,
            "class": ""
        },
        {
            "file": "control-bar/progress-control.js",
            "line": 166,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 1,
            "description": "Displays the current time",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 8,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 37,
            "description": "Displays the duration",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 44,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 73,
            "description": "Time Separator (Not used in main skin, but still available, and could be used as a 'spare element')",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 80,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 93,
            "description": "Displays the time left in the video",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/time-display.js",
            "line": 100,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 1,
            "description": "Control the volume",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 8,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 38,
            "description": "Contains volume level",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 45,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 98,
            "description": "Shows volume level",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 105,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 118,
            "description": "Change volume level",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 126,
            "class": ""
        },
        {
            "file": "control-bar/volume-control.js",
            "line": 129,
            "class": ""
        },
        {
            "file": "control-bar/volume-menu-button.js",
            "line": 1,
            "description": "Menu button with a popup for showing the volume slider.",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "control-bar/volume-menu-button.js",
            "line": 6,
            "class": ""
        },
        {
            "file": "media/flash.externs.js",
            "line": 1,
            "fileoverview": "Externs for video-js.swf. Externs are functions\nthat the compiler shouldn't obfuscate.",
            "class": ""
        },
        {
            "file": "media/flash.externs.js",
            "line": 6,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "media/flash.externs.js",
            "line": 11,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "class": ""
        },
        {
            "file": "media/flash.externs.js",
            "line": 17,
            "description": "Control methods",
            "class": ""
        },
        {
            "file": "media/flash.externs.js",
            "line": 24,
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "media/flash.js",
            "line": 1,
            "fileoverview": "VideoJS-SWF - Custom Flash Player with HTML5-ish API\nhttps://github.com/zencoder/video-js-swf\nNot using setupTriggers. Using global onEvent func to distribute events",
            "class": ""
        },
        {
            "file": "media/flash.js",
            "line": 7,
            "description": "HTML5 Media Controller - Wrapper for HTML5 Media API",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                },
                {
                    "name": "ready",
                    "description": "",
                    "type": "Function="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "media/flash.js",
            "line": 15,
            "class": ""
        },
        {
            "file": "media/flash.js",
            "line": 267,
            "this": "{*}",
            "class": ""
        },
        {
            "file": "media/flash.js",
            "line": 275,
            "this": "{*}",
            "class": ""
        },
        {
            "file": "media/html5.js",
            "line": 1,
            "fileoverview": "HTML5 Media Controller - Wrapper for HTML5 Media API",
            "class": ""
        },
        {
            "file": "media/html5.js",
            "line": 5,
            "description": "HTML5 Media Controller - Wrapper for HTML5 Media API",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                },
                {
                    "name": "ready",
                    "description": "",
                    "type": "Function="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "media/html5.js",
            "line": 13,
            "class": ""
        },
        {
            "file": "media/loader.js",
            "line": 1,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "media/loader.js",
            "line": 5,
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 1,
            "fileoverview": "Media Technology Controller - Base class for media playback\ntechnology controllers like Flash and HTML5",
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 6,
            "description": "Base class for media (HTML5 Video, Flash) controllers",
            "params": [
                {
                    "name": "player",
                    "description": "Central player instance",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "Options object",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 13,
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 21,
            "description": "Set up click and touch listeners for the playback element\nOn desktops, a click on the video itself will toggle playback,\non a mobile device a click on the video toggles controls.\n(toggling controls is done by toggling the user state between active and\ninactive)\n\nA tap can signal that a user has become active, or has become inactive\ne.g. a quick tap on an iPhone movie should reveal the controls. Another\nquick tap should hide them again (signaling the user is in an inactive\nviewing state)\n\nIn addition to this, we still want the user to be considered inactive after\na few seconds of inactivity.\n\nNote: the only part of iOS interaction we can't mimic with this setup\nis a touch and hold on the video element counting as activity in order to\nkeep the controls showing, but that shouldn't be an issue. A touch and hold on\nany controls will still keep the user active",
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 111,
            "description": "Remove the listeners used for click and tap controls. This is needed for\ntoggling to controls disabled, where a tap/touch should do nothing.",
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 128,
            "description": "Handle a click on the media element. By default will play/pause the media.",
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 147,
            "description": "Handle a tap on the media element. By default it will toggle the user\nactivity state, which hides and shows the controls.",
            "class": ""
        },
        {
            "file": "media/media.js",
            "line": 170,
            "description": "List of default API methods for any MediaTechController",
            "type": "{String}",
            "class": ""
        },
        {
            "file": "big-play-button.js",
            "line": 3,
            "description": "Initial play button. Shows before the video has played. The hiding of the\nbig play button is done via CSS and player states.",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "button.js",
            "line": 3,
            "description": "Base class for all buttons",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "button.js",
            "line": 10,
            "class": ""
        },
        {
            "file": "cdn.js",
            "line": 1,
            "description": "Google Analytics tracking pixel for the freely hosted version of Video.js\nat vjs.zencdn.net. We'll use this data to develop a support matrix of\nbrowsers and devices, and possibly track errors.\n\nThis code generates the GA tracking URL without requiring the GA javascript\nlibrary.",
            "type": "{Image}",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 1,
            "fileoverview": "Player Component - Base class for all UI objects",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 6,
            "description": "Base UI Component class",
            "params": [
                {
                    "name": "player",
                    "description": "Main Player",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "component.js",
            "line": 13,
            "class": ""
        },
        {
            "file": "component.js",
            "line": 44,
            "description": "Dispose of the component and all child components.",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 76,
            "description": "Reference to main player instance.",
            "type": "{vjs.Player}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 83,
            "description": "Return the component's player.",
            "return": {
                "description": "",
                "type": "vjs.Player"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 91,
            "description": "Component options object.",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 98,
            "description": "Deep merge of options objects\nWhenever a property is an object on both options objects\nthe two properties will be merged using vjs.obj.deepMerge.\n\nThis is used for merging options for child components. We\nwant it to be easy to override individual options on a child\ncomponent without having to rewrite all the other default options.\n\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n\nRESULT\n\n{\n  children: {\n    'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\n    'childTwo': null, // Disabled. Won't be initialized.\n    'childThree': {},\n    'childFour': {}\n  }\n}",
            "params": [
                {
                    "name": "obj",
                    "description": "Object whose values will be overwritten",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "NEW merged object. Does not return obj1.",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 144,
            "description": "The DOM element for the component.",
            "type": "{Element}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 151,
            "description": "Create the component's DOM element.",
            "params": [
                {
                    "name": "tagName",
                    "description": "Element's node type. e.g. 'div'",
                    "type": "String="
                },
                {
                    "name": "attributes",
                    "description": "An object of element attributes that should be set on the element.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 161,
            "description": "Return the component's DOM element.",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 169,
            "description": "An optional element where, if defined, children will be inserted\n  instead of directly in el_",
            "type": "{Element}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 177,
            "description": "Return the component's DOM element for embedding content.\n  will either be el_ or a new element defined in createEl",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 186,
            "description": "The ID for the component.",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 193,
            "description": "Return the component's ID.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 201,
            "description": "The name for the component. Often used to reference the component.",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 208,
            "description": "Return the component's ID.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 216,
            "description": "Array of child components",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 223,
            "description": "Returns array of all child components.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 231,
            "description": "Object of child components by ID",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 238,
            "description": "Returns a child component with the provided ID.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 246,
            "description": "Object of child components by Name",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 253,
            "description": "Returns a child component with the provided ID.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 261,
            "description": "Adds a child component inside this component.",
            "params": [
                {
                    "name": "child",
                    "description": "The class name or instance of a child to add.",
                    "type": "String|vjs.Component"
                },
                {
                    "name": "options",
                    "description": "Optional options, including options to be passed to\n children of the child.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "The child component, because it might be created in this process.",
                "type": "vjs.Component"
            },
            "suppress": "{accessControls|checkRegExp|checkTypes|checkVars|const|constantProperty|deprecated|duplicate|es5Strict|fileoverviewTags|globalThis|invalidCasts|missingProperties|nonStandardJsDocs|strictModuleDepCheck|undefinedNames|undefinedVars|unknownDefines|uselessCode|visibility}",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 348,
            "description": "Initialize default child components from options",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 387,
            "description": "Add an event listener to this component's element. Context will be the component.",
            "params": [
                {
                    "name": "type",
                    "description": "Event type e.g. 'click'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Event listener",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 398,
            "description": "Remove an event listener from the component's element",
            "params": [
                {
                    "name": "type",
                    "description": "Optional event type. Without type it will remove all listeners.",
                    "type": "String="
                },
                {
                    "name": "fn",
                    "description": "Optional event listener. Without fn it will remove all listeners for a type.",
                    "type": "Function="
                }
            ],
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 409,
            "description": "Add an event listener to be triggered only once and then removed",
            "params": [
                {
                    "name": "type",
                    "description": "Event type",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Event listener",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 420,
            "description": "Trigger an event on an element",
            "params": [
                {
                    "name": "type",
                    "description": "Event type to trigger",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "Event object to be passed to the listener",
                    "type": "Event|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 433,
            "description": "Is the component loaded.",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 440,
            "description": "Trigger ready as soon as initialization is finished.\n  Allows for delaying ready. Override on a sub class prototype.\n  If you set this.isReadyOnInitFinish_ it will affect all components.\n  Specially used when waiting for the Flash player to asynchrnously load.",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 450,
            "description": "List of ready listeners",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 457,
            "description": "Bind a listener to the component's ready state.\n  Different from event listeners in that if the ready event has already happend\n  it will trigger the function immediately.",
            "params": [
                {
                    "name": "fn",
                    "description": "Ready listener",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 478,
            "description": "Trigger the ready listeners",
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 504,
            "description": "Add a CSS class name to the component's element",
            "params": [
                {
                    "name": "classToAdd",
                    "description": "Classname to add",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 514,
            "description": "Remove a CSS class name from the component's element",
            "params": [
                {
                    "name": "classToRemove",
                    "description": "Classname to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 524,
            "description": "Show the component element if hidden",
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 533,
            "description": "Hide the component element if hidden",
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 542,
            "description": "Lock an item in its visible state. To be used with fadeIn/fadeOut.",
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 551,
            "description": "Unlock an item to be hidden. To be used with fadeIn/fadeOut.",
            "return": {
                "description": "",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 560,
            "description": "Disable component by making it unshowable",
            "class": ""
        },
        {
            "file": "component.js",
            "line": 568,
            "description": "If a value is provided it will change the width of the player to that value\notherwise the width is returned\nhttp://dev.w3.org/html5/spec/dimension-attributes.html#attr-dim-height\nVideo tag width/height only work in pixels. No percents.\nBut allowing limited percents use. e.g. width() will return number+%, not computed width",
            "params": [
                {
                    "name": "num",
                    "description": "Optional width number",
                    "type": "Number|String="
                },
                {
                    "name": "skipListeners",
                    "description": "Skip the 'resize' event trigger",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "Returns 'this' if dimension was set.\n  Otherwise it returns the dimension.",
                "type": "vjs.Component|Number|String"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 583,
            "description": "Get or set the height of the player",
            "params": [
                {
                    "name": "num",
                    "description": "Optional new player height",
                    "type": "Number|String="
                },
                {
                    "name": "skipListeners",
                    "description": "Optional skip resize event trigger",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "The player, or the dimension",
                "type": "vjs.Component|Number|String"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 593,
            "description": "Set both width and height at the same time.",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number|String"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "The player.",
                "type": "vjs.Component"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 604,
            "description": "Get or set width or height.\nAll for an integer, integer + 'px' or integer + '%';\nKnown issue: hidden elements. Hidden elements officially have a width of 0.\nSo we're defaulting to the style.width value and falling back to computedStyle\nwhich has the hidden element issue.\nInfo, but probably not an efficient fix:\nhttp://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/",
            "params": [
                {
                    "name": "widthOrHeight",
                    "description": "'width' or 'height'",
                    "type": "String="
                },
                {
                    "name": "num",
                    "description": "New dimension",
                    "type": "Number|String="
                },
                {
                    "name": "skipListeners",
                    "description": "Skip resize event trigger",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Return the player if setting a dimension.\n                                        Otherwise it returns the dimension.",
                "type": "vjs.Component|Number|String"
            },
            "class": ""
        },
        {
            "file": "component.js",
            "line": 670,
            "description": "Emit 'tap' events when touch events are supported. We're requireing them to\nbe enabled because otherwise every component would have this extra overhead\nunnecessarily, on mobile devices where extra overhead is especially bad.\n\nThis is being implemented so we can support taps on the video element\ntoggling the controls.",
            "class": ""
        },
        {
            "file": "core-object.js",
            "line": 1,
            "description": "Core Object/Class for objects that use inheritance + contstructors",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "core-object.js",
            "line": 12,
            "description": "Create a new object that inherits from this Object",
            "params": [
                {
                    "name": "props",
                    "description": "Functions and properties to be applied to the\n                      new object's prototype",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns an object that inherits from CoreObject",
                "type": "vjs.CoreObject"
            },
            "this": "{*}",
            "class": ""
        },
        {
            "file": "core-object.js",
            "line": 61,
            "description": "Create a new instace of this Object class",
            "return": {
                "description": "Returns an instance of a CoreObject subclass",
                "type": "vjs.CoreObject"
            },
            "this": "{*}",
            "class": ""
        },
        {
            "file": "core.js",
            "line": 1,
            "fileoverview": "Main function src.",
            "class": ""
        },
        {
            "file": "core.js",
            "line": 10,
            "description": "Doubles as the main function for users to create a player instance and also\nthe main library object.",
            "params": [
                {
                    "name": "id",
                    "description": "Video element or video element ID",
                    "type": "String|Element"
                },
                {
                    "name": "options",
                    "description": "Optional options object for config/settings",
                    "type": "Object="
                },
                {
                    "name": "ready",
                    "description": "Optional ready callback",
                    "type": "Function="
                }
            ],
            "return": {
                "description": "A player instance",
                "type": "vjs.Player"
            },
            "class": ""
        },
        {
            "file": "core.js",
            "line": 63,
            "description": "Global Player instance options, surfaced from vjs.Player.prototype.options_\nvjs.options = vjs.Player.prototype.options_\nAll options should use string keys so they avoid\nrenaming by closure compiler",
            "type": "{Object}",
            "class": ""
        },
        {
            "file": "core.js",
            "line": 101,
            "description": "Global player list",
            "type": "{Object}",
            "class": ""
        },
        {
            "file": "events.js",
            "line": 1,
            "fileoverview": "Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n(Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\nThis should work very similarly to jQuery's events, however it's based off the book version which isn't as\nrobust as jquery's, so there's probably some differences.",
            "class": ""
        },
        {
            "file": "events.js",
            "line": 8,
            "description": "Add an event listener to element\nIt stores the handler function in a separate cache object\nand adds a generic handler to the element's event,\nalong with a unique id (guid) to the element.",
            "params": [
                {
                    "name": "elem",
                    "description": "Element or object to bind listeners to",
                    "type": "Element|Object"
                },
                {
                    "name": "type",
                    "description": "Type of event to bind to.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Event listener.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "events.js",
            "line": 63,
            "description": "Removes event listeners from an element",
            "params": [
                {
                    "name": "elem",
                    "description": "Object to remove listeners from",
                    "type": "Element|Object"
                },
                {
                    "name": "type",
                    "description": "Type of listener to remove. Don't include to remove all events from element.",
                    "type": "String="
                },
                {
                    "name": "fn",
                    "description": "Specific listener to remove. Don't incldue to remove listeners for an event type.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "events.js",
            "line": 113,
            "description": "Clean up the listener cache and dispatchers",
            "params": [
                {
                    "name": "elem",
                    "description": "Element to clean up",
                    "type": "Element|Object"
                },
                {
                    "name": "type",
                    "description": "Type of event to clean up",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "events.js",
            "line": 152,
            "description": "Fix a native event to have standard property values",
            "params": [
                {
                    "name": "event",
                    "description": "Event object to fix",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "events.js",
            "line": 254,
            "description": "Trigger an event for an element",
            "params": [
                {
                    "name": "elem",
                    "description": "Element to trigger an event on",
                    "type": "Element|Object"
                },
                {
                    "name": "event",
                    "description": "Type of event to trigger",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "events.js",
            "line": 325,
            "description": "Trigger a listener only once for an event",
            "params": [
                {
                    "name": "elem",
                    "description": "Element or object to",
                    "type": "Element|Object"
                },
                {
                    "name": "type",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "fn",
                    "description": "[description]",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "exports.js",
            "line": 1,
            "fileoverview": "Exports for Video.js.\nExports are publically available variables.\nAll other variables (including function names) will probably\nbe renamed by closure compiler.",
            "class": ""
        },
        {
            "file": "exports.js",
            "line": 8,
            "description": "vjs (internal only) = videojs = _V_ (external only)\n\nvjs is the same as the goog var in Closure Library. It holds all variables\nused in Video.js development. Closure compiler will rename all variables,\nincluding class prototype functions, except those specifcally\nexported (eports.js). Don't assume any function you can use in Video.js\ndevelopment will be available on window.videojs for use with other js.\n\nFor example, vjs.trim is an internal function and will be renamed by compiler\nto something like 'a.b', or actually more likely 'a' removing it from\na parent object.\n\nvideojs is a var that helps bridge bewteen internal and external development.\nAvoid using it over vjs when developing the Video.js core.\n\n_V_ is only external. It's just cute and short(er). Like jQuery === $.\nAlso because it's nice having a different var for internal (vjs) vs.\nexternal (_V_) because it makes it clearer what context we're in.",
            "class": ""
        },
        {
            "file": "json.js",
            "line": 1,
            "fileoverview": "Add JSON support",
            "suppress": "{undefinedVars}\n(Compiler doesn't like JSON not being declared)",
            "class": ""
        },
        {
            "file": "json.js",
            "line": 7,
            "description": "Javascript JSON implementation\n(Parse Method Only)\nhttps://github.com/douglascrockford/JSON-js/blob/master/json2.js\nOnly using for parse method when parsing data-setup attribute JSON.",
            "type": "{Object}",
            "suppress": "{undefinedVars}",
            "class": ""
        },
        {
            "file": "json.js",
            "line": 17,
            "suppress": "{undefinedVars}",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 3,
            "description": "Creates an element and applies properties.",
            "params": [
                {
                    "name": "tagName",
                    "description": "Name of tag to be created.",
                    "type": "String="
                },
                {
                    "name": "properties",
                    "description": "Element properties to be applied.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 34,
            "description": "Uppercase the first letter of a string",
            "params": [
                {
                    "name": "string",
                    "description": "String to be uppercased",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 43,
            "description": "Object functions container",
            "type": "{Object}",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 49,
            "description": "Object.create shim for prototypal inheritance.\nhttps://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to use as prototype",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 66,
            "description": "Loop through each property in an object and call a function\nwhose arguments are (key,value)",
            "params": [
                {
                    "name": "obj",
                    "description": "Object of properties",
                    "type": "Object"
                },
                {
                    "name": "fn",
                    "description": "Function to be called on each property.",
                    "type": "Function"
                }
            ],
            "this": "{*}",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 81,
            "description": "Merge two objects together and return the original.",
            "params": [
                {
                    "name": "obj1",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 97,
            "description": "Merge two objects, and merge any properties that are objects\ninstead of just overwriting one. Uses to merge options hashes\nwhere deeper default settings are important.",
            "params": [
                {
                    "name": "obj1",
                    "description": "Object to override",
                    "type": "Object"
                },
                {
                    "name": "obj2",
                    "description": "Overriding object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "New object. Obj1 and Obj2 will be untouched.",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 129,
            "description": "Make a copy of the supplied object",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to copy",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Copy of object",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 138,
            "description": "Check if an object is plain, and not a dom node or any object sub-instance",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if plain, false otherwise",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 150,
            "description": "Bind (a.k.a proxy or Context). A simple method for changing the context of a function\n  It also stores a unique id on the function so it can be easily removed from events",
            "params": [
                {
                    "name": "context",
                    "description": "The object to bind as scope",
                    "type": "*"
                },
                {
                    "name": "fn",
                    "description": "The function to be bound to a scope",
                    "type": "Function"
                },
                {
                    "name": "uid",
                    "description": "An optional unique ID for the function to be set",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 178,
            "description": "Element Data Store. Allows for binding data to an element without putting it directly on the element.\nEx. Event listneres are stored here.\n(also from jsninja.com, slightly modified and updated for closure compiler)",
            "type": "{Object}",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 186,
            "description": "Unique ID for an element or function",
            "type": "{Number}",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 192,
            "description": "Unique attribute name to store an element's guid in",
            "type": "{String}",
            "constant": "",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 199,
            "description": "Returns the cache object where data for an element is stored",
            "params": [
                {
                    "name": "el",
                    "description": "Element to store data for.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 213,
            "description": "Returns the cache object where data for an element is stored",
            "params": [
                {
                    "name": "el",
                    "description": "Element to store data for.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 223,
            "description": "Delete data for the element from the cache and the guid attr from getElementById",
            "params": [
                {
                    "name": "el",
                    "description": "Remove data for an element",
                    "type": "Element"
                }
            ],
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 259,
            "description": "Add a CSS class name to an element",
            "params": [
                {
                    "name": "element",
                    "description": "Element to add class name to",
                    "type": "Element"
                },
                {
                    "name": "classToAdd",
                    "description": "Classname to add",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 270,
            "description": "Remove a CSS class name from an element",
            "params": [
                {
                    "name": "element",
                    "description": "Element to remove from class name",
                    "type": "Element"
                },
                {
                    "name": "classToAdd",
                    "description": "Classname to remove",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 288,
            "description": "Element for testing browser HTML5 video capabilities",
            "type": "{Element}",
            "constant": "",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 295,
            "description": "Useragent for browser testing.",
            "type": "{String}",
            "constant": "",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 302,
            "description": "Device is an iPhone",
            "type": "{Boolean}",
            "constant": "",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 348,
            "description": "Get an element's attribute values, as defined on the HTML tag\nAttributs are not the same as properties. They're defined on the tag\nor with setAttribute (which shouldn't be used with HTML)\nThis will return true or false for boolean attributes.",
            "params": [
                {
                    "name": "tag",
                    "description": "Element from which to get tag attributes",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 389,
            "description": "Get the computed style value for an element\nFrom http://robertnyman.com/2006/04/24/get-the-rendered-style-of-an-element/",
            "params": [
                {
                    "name": "el",
                    "description": "Element to get style value for",
                    "type": "Element"
                },
                {
                    "name": "strCssRule",
                    "description": "Style name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Style value",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 408,
            "description": "Insert an element as the first child node of another",
            "params": [
                {
                    "name": "child",
                    "description": "Element to insert",
                    "type": "Element"
                },
                {
                    "name": "parent",
                    "description": "Element to insert child into",
                    "type": "[type]"
                }
            ],
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 421,
            "description": "Object to hold browser support information",
            "type": "{Object}",
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 427,
            "description": "Shorthand for document.getElementById()\nAlso allows for CSS (jQuery) ID syntax. But nothing other than IDs.",
            "params": [
                {
                    "name": "id",
                    "description": "Element ID",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Element with supplied ID",
                "type": "Element"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 441,
            "description": "Format seconds as a time string, H:MM:SS or M:SS\nSupplying a guide (in seconds) will force a number of leading zeros\nto cover the length of the guide",
            "params": [
                {
                    "name": "seconds",
                    "description": "Number of seconds to be turned into a string",
                    "type": "Number"
                },
                {
                    "name": "guide",
                    "description": "Number (in seconds) to model the string after",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Time formatted as H:MM:SS or M:SS",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 478,
            "description": "Trim whitespace from the ends of a string.",
            "params": [
                {
                    "name": "string",
                    "description": "String to trim",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Trimmed string",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 487,
            "description": "Should round off a number to a decimal place",
            "params": [
                {
                    "name": "num",
                    "description": "Number to round",
                    "type": "Number"
                },
                {
                    "name": "dec",
                    "description": "Number of decimal places to round to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Rounded number",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 498,
            "description": "Should create a fake TimeRange object\nMimics an HTML5 time range instance, which has functions that\nreturn the start and end times for a range\nTimeRanges are returned by the buffered() method",
            "params": [
                {
                    "name": "start",
                    "description": "Start time in seconds",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "End time in seconds",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Fake TimeRange object",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 515,
            "description": "Simple http request for retrieving external files (e.g. text tracks)",
            "params": [
                {
                    "name": "url",
                    "description": "URL of resource",
                    "type": "String"
                },
                {
                    "name": "onSuccess",
                    "description": "Success callback",
                    "type": "Function="
                },
                {
                    "name": "onError",
                    "description": "Error callback",
                    "type": "Function="
                }
            ],
            "class": ""
        },
        {
            "file": "lib.js",
            "line": 583,
            "description": "Get abosolute version of relative URL. Used to tell flash correct URL.\nhttp://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue",
            "params": [
                {
                    "name": "url",
                    "description": "URL to make absolute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Absolute URL",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "loading-spinner.js",
            "line": 3,
            "description": "Loading spinner for waiting events",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "loading-spinner.js",
            "line": 10,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 3,
            "description": "The base for text track and settings menu buttons.",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 11,
            "description": "Add a menu item to the menu",
            "params": [
                {
                    "name": "component",
                    "description": "Component or component type to add",
                    "type": "Object|String"
                }
            ],
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 22,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 44,
            "description": "Menu item",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 51,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 58,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 66,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 71,
            "description": "Set this menu item as selected or not",
            "params": [
                {
                    "name": "selected",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 86,
            "description": "A button class with a popup menu",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 93,
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 113,
            "description": "Track the state of the menu button",
            "type": "{Boolean}",
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 143,
            "description": "Create the list of menu items. Specific to each subclass.",
            "class": ""
        },
        {
            "file": "menu.js",
            "line": 148,
            "class": ""
        },
        {
            "file": "player.js",
            "line": 23,
            "description": "player's constructor function",
            "constructs": "",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "tag",
                    "description": "The original video tag used for configuring options",
                    "type": "Element"
                },
                {
                    "name": "options",
                    "description": "Player options",
                    "type": "Object="
                },
                {
                    "name": "ready",
                    "description": "Ready callback function",
                    "type": "Function="
                }
            ],
            "class": ""
        },
        {
            "file": "player.js",
            "line": 109,
            "description": "Player instance options, surfaced using vjs.options\nvjs.options = vjs.Player.prototype.options_\nMake changes in vjs.options, not here.\nAll options should use string keys so they avoid\nrenaming by closure compiler",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "player.js",
            "line": 449,
            "description": "Object for cached values.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "player.js",
            "line": 513,
            "description": "start media playback\n\n##### EXAMPLE:\n\n```js\n  myPlayer.play();\n```",
            "return": {
                "description": "self",
                "type": "vjs.Player"
            },
            "class": ""
        },
        {
            "file": "player.js",
            "line": 858,
            "description": "the url of the poster image source",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "player.js",
            "line": 865,
            "description": "get or set the poster image source url\n\n##### EXAMPLE:\n\n    // getting\n    var currentPoster = myPlayer.poster();\n\n    // setting\n    myPlayer.poster('http://example.com/myImage.jpg');",
            "params": [
                {
                    "name": "src",
                    "description": "Poster image source URL",
                    "type": "String=",
                    "optional": true
                }
            ],
            "return": {
                "description": "self when setting",
                "type": "vjs.Player"
            },
            "class": ""
        },
        {
            "file": "player.js",
            "line": 888,
            "description": "Whether or not the controls are showing",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "player.js",
            "line": 895,
            "description": "Get or set whether or not the controls are showing.",
            "params": [
                {
                    "name": "controls",
                    "description": "Set controls to showing or not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Controls are showing",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "player.js",
            "line": 923,
            "description": "Toggle native controls on/off. Native controls are the controls built into\ndevices (e.g. default iPhone controls), Flash, or other techs\n(e.g. Vimeo Controls)\n\n**This should only be set by the current tech, because only the tech knows\nif it can support native controls**",
            "params": [
                {
                    "name": "bool",
                    "description": "True signals that native controls are on",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns the player",
                "type": "vjs.Player"
            },
            "class": ""
        },
        {
            "file": "player.js",
            "line": 943,
            "description": "player is using the native device controls",
            "itemtype": "event",
            "name": "usingnativecontrols",
            "type": "{object}",
            "class": ""
        },
        {
            "file": "player.js",
            "line": 953,
            "description": "player is using the custom HTML controls",
            "itemtype": "event",
            "name": "usingcustomcontrols",
            "type": "{object}",
            "class": ""
        },
        {
            "file": "poster.js",
            "line": 3,
            "description": "Poster image. Shows before the video plays.",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "poster.js",
            "line": 10,
            "class": ""
        },
        {
            "file": "setup.js",
            "line": 1,
            "fileoverview": "Functions for automatically setting up a player\nbased on the data-setup attribute of the video tag",
            "class": ""
        },
        {
            "file": "slider.js",
            "line": 3,
            "description": "Parent for seek bar and volume slider",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "slider.js",
            "line": 10,
            "class": ""
        },
        {
            "file": "slider.js",
            "line": 194,
            "description": "Listener for click events on slider, used to prevent clicks\n  from bubbling up to parent elements like button menus.",
            "params": [
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "slider.js",
            "line": 204,
            "description": "SeekBar Behavior includes play progress bar, and seek handle\nNeeded so it can determine seek position based on handle position/size",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "slider.js",
            "line": 213,
            "description": "Default value of the slider",
            "type": "{Number}",
            "class": ""
        },
        {
            "file": "slider.js",
            "line": 219,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 1,
            "fileoverview": "Text Tracks\nText tracks are tracks of timed text events.\nCaptions - text displayed over the video for the hearing impared\nSubtitles - text displayed over the video for those who don't understand langauge in the video\nChapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video\nDescriptions (not supported yet) - audio descriptions that are read back to the user by a screen reading device",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 12,
            "description": "List of associated text tracks",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 19,
            "description": "Get an array of associated text tracks. captions, subtitles, chapters, descriptions\nhttp://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks",
            "return": {
                "description": "Array of track objects",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 29,
            "description": "Add a text track\nIn addition to the W3C settings we allow adding additional info through options.\nhttp://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack",
            "params": [
                {
                    "name": "kind",
                    "description": "Captions, subtitles, chapters, descriptions, or metadata",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "Optional label",
                    "type": "String="
                },
                {
                    "name": "language",
                    "description": "Optional language",
                    "type": "String="
                },
                {
                    "name": "options",
                    "description": "Additional track options, like src",
                    "type": "Object="
                }
            ],
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 66,
            "description": "Add an array of text tracks. captions, subtitles, chapters, descriptions\nTrack objects will be stored in the player.textTracks() array",
            "params": [
                {
                    "name": "trackList",
                    "description": "Array of track elements or objects (fake track elements)",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 114,
            "description": "Track Class\nContains track methods for loading, showing, parsing cues of tracks",
            "params": [
                {
                    "name": "player",
                    "description": "",
                    "type": "vjs.Player|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 122,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 146,
            "description": "Track kind value. Captions, subtitles, etc.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 152,
            "description": "Get the track kind value",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 160,
            "description": "Track src value",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 166,
            "description": "Get the track src value",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 174,
            "description": "Track default value\nIf default is used, subtitles/captions to start showing",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 181,
            "description": "Get the track default value\n'default' is a reserved keyword",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 190,
            "description": "Track title value",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 196,
            "description": "Get the track title value",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 204,
            "description": "Language - two letter string to represent track language, e.g. 'en' for English\nSpec def: readonly attribute DOMString language;",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 211,
            "description": "Get the track language value",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 219,
            "description": "Track label e.g. 'English'\nSpec def: readonly attribute DOMString label;",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 226,
            "description": "Get the track label value",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 234,
            "description": "All cues of the track. Cues have a startTime, endTime, text, and other properties.\nSpec def: readonly attribute TextTrackCueList cues;",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 241,
            "description": "Get the track cues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 249,
            "description": "ActiveCues is all cues that are currently showing\nSpec def: readonly attribute TextTrackCueList activeCues;",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 256,
            "description": "Get the track active cues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 264,
            "description": "ReadyState describes if the text file has been loaded\nconst unsigned short NONE = 0;\nconst unsigned short LOADING = 1;\nconst unsigned short LOADED = 2;\nconst unsigned short ERROR = 3;\nreadonly attribute unsigned short readyState;",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 275,
            "description": "Get the track readyState",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 283,
            "description": "Mode describes if the track is showing, hidden, or disabled\nconst unsigned short OFF = 0;\nconst unsigned short HIDDEN = 1; (still triggering cuechange events, but not visible)\nconst unsigned short SHOWING = 2;\nattribute unsigned short mode;",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 293,
            "description": "Get the track mode",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 301,
            "description": "Change the font size of the text track to make it larger when playing in fullscreen mode\nand restore it to its normal size when not in fullscreen mode.",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 317,
            "description": "Create basic div to hold cue text",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 327,
            "description": "Show: Mode Showing (2)\nIndicates that the text track is active. If no attempt has yet been made to obtain the track's cues, the user agent will perform such an attempt momentarily.\nThe user agent is maintaining a list of which cues are active, and events are being fired accordingly.\nIn addition, for text tracks whose kind is subtitles or captions, the cues are being displayed over the video as appropriate;\nfor text tracks whose kind is descriptions, the user agent is making the cues available to the user in a non-visual fashion;\nand for text tracks whose kind is chapters, the user agent is making available to the user a mechanism by which the user can navigate to any point in the media resource by selecting a cue.\nThe showing by default state is used in conjunction with the default attribute on track elements to indicate that the text track was enabled due to that attribute.\nThis allows the user agent to override the state if a later track is discovered that is more appropriate per the user's preferences.",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 346,
            "description": "Hide: Mode Hidden (1)\nIndicates that the text track is active, but that the user agent is not actively displaying the cues.\nIf no attempt has yet been made to obtain the track's cues, the user agent will perform such an attempt momentarily.\nThe user agent is maintaining a list of which cues are active, and events are being fired accordingly.",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 362,
            "description": "Disable: Mode Off/Disable (0)\nIndicates that the text track is not active. Other than for the purposes of exposing the track in the DOM, the user agent is ignoring the text track.\nNo cues are active, no events are fired, and the user agent will not attempt to obtain the track's cues.",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 378,
            "description": "Turn on cue tracking. Tracks that are showing OR hidden are active.",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 401,
            "description": "Turn off cue tracking.",
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 670,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 678,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 684,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 695,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 699,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 722,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 726,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 748,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 752,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 790,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 794,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 848,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 852,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 862,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 866,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 878,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 882,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 964,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "tracks.js",
            "line": 968,
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: fileoverview",
            "line": " media/flash.externs.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " media/flash.js:1"
        },
        {
            "message": "unknown tag: this",
            "line": " media/flash.js:267"
        },
        {
            "message": "unknown tag: this",
            "line": " media/flash.js:275"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " media/html5.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " media/media.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " component.js:1"
        },
        {
            "message": "unknown tag: suppress",
            "line": " component.js:261"
        },
        {
            "message": "unknown tag: this",
            "line": " core-object.js:12"
        },
        {
            "message": "unknown tag: this",
            "line": " core-object.js:61"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " core.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " events.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " exports.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " json.js:1"
        },
        {
            "message": "unknown tag: suppress",
            "line": " json.js:1"
        },
        {
            "message": "unknown tag: suppress",
            "line": " json.js:7"
        },
        {
            "message": "unknown tag: suppress",
            "line": " json.js:17"
        },
        {
            "message": "unknown tag: this",
            "line": " lib.js:66"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib.js:192"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib.js:288"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib.js:295"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib.js:302"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " setup.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " tracks.js:1"
        },
        {
            "message": "Missing item type\nContainer of main controls",
            "line": " control-bar/control-bar.js:1"
        },
        {
            "message": "Missing item type\nToggle fullscreen video",
            "line": " control-bar/fullscreen-toggle.js:1"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/fullscreen-toggle.js:8"
        },
        {
            "message": "Missing item type\nMute the audio",
            "line": " control-bar/mute-toggle.js:1"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/mute-toggle.js:8"
        },
        {
            "message": "Missing item type\nButton to toggle between play and pause",
            "line": " control-bar/play-toggle.js:1"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/play-toggle.js:8"
        },
        {
            "message": "Missing item type\nSeek, Load Progress, and Play Progress",
            "line": " control-bar/progress-control.js:1"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/progress-control.js:8"
        },
        {
            "message": "Missing item type\nSeek Bar and holder for the progress bars",
            "line": " control-bar/progress-control.js:26"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/progress-control.js:33"
        },
        {
            "message": "Missing item type\nShows load progres",
            "line": " control-bar/progress-control.js:108"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/progress-control.js:115"
        },
        {
            "message": "Missing item type\nShows play progress",
            "line": " control-bar/progress-control.js:134"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/progress-control.js:141"
        },
        {
            "message": "Missing item type\nSeekBar component includes play progress bar, and seek handle\nNeeded so it can determine seek position based on handle position/size",
            "line": " control-bar/progress-control.js:154"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/progress-control.js:163"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/progress-control.js:166"
        },
        {
            "message": "Missing item type\nDisplays the current time",
            "line": " control-bar/time-display.js:1"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/time-display.js:8"
        },
        {
            "message": "Missing item type\nDisplays the duration",
            "line": " control-bar/time-display.js:37"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/time-display.js:44"
        },
        {
            "message": "Missing item type\nTime Separator (Not used in main skin, but still available, and could be used as a 'spare element')",
            "line": " control-bar/time-display.js:73"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/time-display.js:80"
        },
        {
            "message": "Missing item type\nDisplays the time left in the video",
            "line": " control-bar/time-display.js:93"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/time-display.js:100"
        },
        {
            "message": "Missing item type\nControl the volume",
            "line": " control-bar/volume-control.js:1"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/volume-control.js:8"
        },
        {
            "message": "Missing item type\nContains volume level",
            "line": " control-bar/volume-control.js:38"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/volume-control.js:45"
        },
        {
            "message": "Missing item type\nShows volume level",
            "line": " control-bar/volume-control.js:98"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/volume-control.js:105"
        },
        {
            "message": "Missing item type\nChange volume level",
            "line": " control-bar/volume-control.js:118"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/volume-control.js:126"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/volume-control.js:129"
        },
        {
            "message": "Missing item type\nMenu button with a popup for showing the volume slider.",
            "line": " control-bar/volume-menu-button.js:1"
        },
        {
            "message": "Missing item type",
            "line": " control-bar/volume-menu-button.js:6"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.externs.js:1"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.externs.js:6"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.externs.js:11"
        },
        {
            "message": "Missing item type\nControl methods",
            "line": " media/flash.externs.js:17"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.externs.js:24"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.js:1"
        },
        {
            "message": "Missing item type\nHTML5 Media Controller - Wrapper for HTML5 Media API",
            "line": " media/flash.js:7"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.js:15"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.js:267"
        },
        {
            "message": "Missing item type",
            "line": " media/flash.js:275"
        },
        {
            "message": "Missing item type",
            "line": " media/html5.js:1"
        },
        {
            "message": "Missing item type\nHTML5 Media Controller - Wrapper for HTML5 Media API",
            "line": " media/html5.js:5"
        },
        {
            "message": "Missing item type",
            "line": " media/html5.js:13"
        },
        {
            "message": "Missing item type",
            "line": " media/loader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " media/loader.js:5"
        },
        {
            "message": "Missing item type",
            "line": " media/media.js:1"
        },
        {
            "message": "Missing item type\nBase class for media (HTML5 Video, Flash) controllers",
            "line": " media/media.js:6"
        },
        {
            "message": "Missing item type",
            "line": " media/media.js:13"
        },
        {
            "message": "Missing item type\nSet up click and touch listeners for the playback element\nOn desktops, a click on the video itself will toggle playback,\non a mobile device a click on the video toggles controls.\n(toggling controls is done by toggling the user state between active and\ninactive)\n\nA tap can signal that a user has become active, or has become inactive\ne.g. a quick tap on an iPhone movie should reveal the controls. Another\nquick tap should hide them again (signaling the user is in an inactive\nviewing state)\n\nIn addition to this, we still want the user to be considered inactive after\na few seconds of inactivity.\n\nNote: the only part of iOS interaction we can't mimic with this setup\nis a touch and hold on the video element counting as activity in order to\nkeep the controls showing, but that shouldn't be an issue. A touch and hold on\nany controls will still keep the user active",
            "line": " media/media.js:21"
        },
        {
            "message": "Missing item type\nRemove the listeners used for click and tap controls. This is needed for\ntoggling to controls disabled, where a tap/touch should do nothing.",
            "line": " media/media.js:111"
        },
        {
            "message": "Missing item type\nHandle a click on the media element. By default will play/pause the media.",
            "line": " media/media.js:128"
        },
        {
            "message": "Missing item type\nHandle a tap on the media element. By default it will toggle the user\nactivity state, which hides and shows the controls.",
            "line": " media/media.js:147"
        },
        {
            "message": "Missing item type\nList of default API methods for any MediaTechController",
            "line": " media/media.js:170"
        },
        {
            "message": "Missing item type\nInitial play button. Shows before the video has played. The hiding of the\nbig play button is done via CSS and player states.",
            "line": " big-play-button.js:3"
        },
        {
            "message": "Missing item type\nBase class for all buttons",
            "line": " button.js:3"
        },
        {
            "message": "Missing item type",
            "line": " button.js:10"
        },
        {
            "message": "Missing item type\nGoogle Analytics tracking pixel for the freely hosted version of Video.js\nat vjs.zencdn.net. We'll use this data to develop a support matrix of\nbrowsers and devices, and possibly track errors.\n\nThis code generates the GA tracking URL without requiring the GA javascript\nlibrary.",
            "line": " cdn.js:1"
        },
        {
            "message": "Missing item type",
            "line": " component.js:1"
        },
        {
            "message": "Missing item type\nBase UI Component class",
            "line": " component.js:6"
        },
        {
            "message": "Missing item type",
            "line": " component.js:13"
        },
        {
            "message": "Missing item type\nDispose of the component and all child components.",
            "line": " component.js:44"
        },
        {
            "message": "Missing item type\nReference to main player instance.",
            "line": " component.js:76"
        },
        {
            "message": "Missing item type\nReturn the component's player.",
            "line": " component.js:83"
        },
        {
            "message": "Missing item type\nComponent options object.",
            "line": " component.js:91"
        },
        {
            "message": "Missing item type\nDeep merge of options objects\nWhenever a property is an object on both options objects\nthe two properties will be merged using vjs.obj.deepMerge.\n\nThis is used for merging options for child components. We\nwant it to be easy to override individual options on a child\ncomponent without having to rewrite all the other default options.\n\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n\nRESULT\n\n{\n  children: {\n    'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\n    'childTwo': null, // Disabled. Won't be initialized.\n    'childThree': {},\n    'childFour': {}\n  }\n}",
            "line": " component.js:98"
        },
        {
            "message": "Missing item type\nThe DOM element for the component.",
            "line": " component.js:144"
        },
        {
            "message": "Missing item type\nCreate the component's DOM element.",
            "line": " component.js:151"
        },
        {
            "message": "Missing item type\nReturn the component's DOM element.",
            "line": " component.js:161"
        },
        {
            "message": "Missing item type\nAn optional element where, if defined, children will be inserted\n  instead of directly in el_",
            "line": " component.js:169"
        },
        {
            "message": "Missing item type\nReturn the component's DOM element for embedding content.\n  will either be el_ or a new element defined in createEl",
            "line": " component.js:177"
        },
        {
            "message": "Missing item type\nThe ID for the component.",
            "line": " component.js:186"
        },
        {
            "message": "Missing item type\nReturn the component's ID.",
            "line": " component.js:193"
        },
        {
            "message": "Missing item type\nThe name for the component. Often used to reference the component.",
            "line": " component.js:201"
        },
        {
            "message": "Missing item type\nReturn the component's ID.",
            "line": " component.js:208"
        },
        {
            "message": "Missing item type\nArray of child components",
            "line": " component.js:216"
        },
        {
            "message": "Missing item type\nReturns array of all child components.",
            "line": " component.js:223"
        },
        {
            "message": "Missing item type\nObject of child components by ID",
            "line": " component.js:231"
        },
        {
            "message": "Missing item type\nReturns a child component with the provided ID.",
            "line": " component.js:238"
        },
        {
            "message": "Missing item type\nObject of child components by Name",
            "line": " component.js:246"
        },
        {
            "message": "Missing item type\nReturns a child component with the provided ID.",
            "line": " component.js:253"
        },
        {
            "message": "Missing item type\nAdds a child component inside this component.",
            "line": " component.js:261"
        },
        {
            "message": "Missing item type\nInitialize default child components from options",
            "line": " component.js:348"
        },
        {
            "message": "Missing item type\nAdd an event listener to this component's element. Context will be the component.",
            "line": " component.js:387"
        },
        {
            "message": "Missing item type\nRemove an event listener from the component's element",
            "line": " component.js:398"
        },
        {
            "message": "Missing item type\nAdd an event listener to be triggered only once and then removed",
            "line": " component.js:409"
        },
        {
            "message": "Missing item type\nTrigger an event on an element",
            "line": " component.js:420"
        },
        {
            "message": "Missing item type\nIs the component loaded.",
            "line": " component.js:433"
        },
        {
            "message": "Missing item type\nTrigger ready as soon as initialization is finished.\n  Allows for delaying ready. Override on a sub class prototype.\n  If you set this.isReadyOnInitFinish_ it will affect all components.\n  Specially used when waiting for the Flash player to asynchrnously load.",
            "line": " component.js:440"
        },
        {
            "message": "Missing item type\nList of ready listeners",
            "line": " component.js:450"
        },
        {
            "message": "Missing item type\nBind a listener to the component's ready state.\n  Different from event listeners in that if the ready event has already happend\n  it will trigger the function immediately.",
            "line": " component.js:457"
        },
        {
            "message": "Missing item type\nTrigger the ready listeners",
            "line": " component.js:478"
        },
        {
            "message": "Missing item type\nAdd a CSS class name to the component's element",
            "line": " component.js:504"
        },
        {
            "message": "Missing item type\nRemove a CSS class name from the component's element",
            "line": " component.js:514"
        },
        {
            "message": "Missing item type\nShow the component element if hidden",
            "line": " component.js:524"
        },
        {
            "message": "Missing item type\nHide the component element if hidden",
            "line": " component.js:533"
        },
        {
            "message": "Missing item type\nLock an item in its visible state. To be used with fadeIn/fadeOut.",
            "line": " component.js:542"
        },
        {
            "message": "Missing item type\nUnlock an item to be hidden. To be used with fadeIn/fadeOut.",
            "line": " component.js:551"
        },
        {
            "message": "Missing item type\nDisable component by making it unshowable",
            "line": " component.js:560"
        },
        {
            "message": "Missing item type\nIf a value is provided it will change the width of the player to that value\notherwise the width is returned\nhttp://dev.w3.org/html5/spec/dimension-attributes.html#attr-dim-height\nVideo tag width/height only work in pixels. No percents.\nBut allowing limited percents use. e.g. width() will return number+%, not computed width",
            "line": " component.js:568"
        },
        {
            "message": "Missing item type\nGet or set the height of the player",
            "line": " component.js:583"
        },
        {
            "message": "Missing item type\nSet both width and height at the same time.",
            "line": " component.js:593"
        },
        {
            "message": "Missing item type\nGet or set width or height.\nAll for an integer, integer + 'px' or integer + '%';\nKnown issue: hidden elements. Hidden elements officially have a width of 0.\nSo we're defaulting to the style.width value and falling back to computedStyle\nwhich has the hidden element issue.\nInfo, but probably not an efficient fix:\nhttp://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/",
            "line": " component.js:604"
        },
        {
            "message": "Missing item type\nEmit 'tap' events when touch events are supported. We're requireing them to\nbe enabled because otherwise every component would have this extra overhead\nunnecessarily, on mobile devices where extra overhead is especially bad.\n\nThis is being implemented so we can support taps on the video element\ntoggling the controls.",
            "line": " component.js:670"
        },
        {
            "message": "Missing item type\nCore Object/Class for objects that use inheritance + contstructors",
            "line": " core-object.js:1"
        },
        {
            "message": "Missing item type\nCreate a new object that inherits from this Object",
            "line": " core-object.js:12"
        },
        {
            "message": "Missing item type\nCreate a new instace of this Object class",
            "line": " core-object.js:61"
        },
        {
            "message": "Missing item type",
            "line": " core.js:1"
        },
        {
            "message": "Missing item type\nDoubles as the main function for users to create a player instance and also\nthe main library object.",
            "line": " core.js:10"
        },
        {
            "message": "Missing item type\nGlobal Player instance options, surfaced from vjs.Player.prototype.options_\nvjs.options = vjs.Player.prototype.options_\nAll options should use string keys so they avoid\nrenaming by closure compiler",
            "line": " core.js:63"
        },
        {
            "message": "Missing item type\nGlobal player list",
            "line": " core.js:101"
        },
        {
            "message": "Missing item type",
            "line": " events.js:1"
        },
        {
            "message": "Missing item type\nAdd an event listener to element\nIt stores the handler function in a separate cache object\nand adds a generic handler to the element's event,\nalong with a unique id (guid) to the element.",
            "line": " events.js:8"
        },
        {
            "message": "Missing item type\nRemoves event listeners from an element",
            "line": " events.js:63"
        },
        {
            "message": "Missing item type\nClean up the listener cache and dispatchers",
            "line": " events.js:113"
        },
        {
            "message": "Missing item type\nFix a native event to have standard property values",
            "line": " events.js:152"
        },
        {
            "message": "Missing item type\nTrigger an event for an element",
            "line": " events.js:254"
        },
        {
            "message": "Missing item type\nTrigger a listener only once for an event",
            "line": " events.js:325"
        },
        {
            "message": "Missing item type",
            "line": " exports.js:1"
        },
        {
            "message": "Missing item type\nvjs (internal only) = videojs = _V_ (external only)\n\nvjs is the same as the goog var in Closure Library. It holds all variables\nused in Video.js development. Closure compiler will rename all variables,\nincluding class prototype functions, except those specifcally\nexported (eports.js). Don't assume any function you can use in Video.js\ndevelopment will be available on window.videojs for use with other js.\n\nFor example, vjs.trim is an internal function and will be renamed by compiler\nto something like 'a.b', or actually more likely 'a' removing it from\na parent object.\n\nvideojs is a var that helps bridge bewteen internal and external development.\nAvoid using it over vjs when developing the Video.js core.\n\n_V_ is only external. It's just cute and short(er). Like jQuery === $.\nAlso because it's nice having a different var for internal (vjs) vs.\nexternal (_V_) because it makes it clearer what context we're in.",
            "line": " exports.js:8"
        },
        {
            "message": "Missing item type",
            "line": " json.js:1"
        },
        {
            "message": "Missing item type\nJavascript JSON implementation\n(Parse Method Only)\nhttps://github.com/douglascrockford/JSON-js/blob/master/json2.js\nOnly using for parse method when parsing data-setup attribute JSON.",
            "line": " json.js:7"
        },
        {
            "message": "Missing item type",
            "line": " json.js:17"
        },
        {
            "message": "Missing item type\nCreates an element and applies properties.",
            "line": " lib.js:3"
        },
        {
            "message": "Missing item type\nUppercase the first letter of a string",
            "line": " lib.js:34"
        },
        {
            "message": "Missing item type\nObject functions container",
            "line": " lib.js:43"
        },
        {
            "message": "Missing item type\nObject.create shim for prototypal inheritance.\nhttps://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create",
            "line": " lib.js:49"
        },
        {
            "message": "Missing item type\nLoop through each property in an object and call a function\nwhose arguments are (key,value)",
            "line": " lib.js:66"
        },
        {
            "message": "Missing item type\nMerge two objects together and return the original.",
            "line": " lib.js:81"
        },
        {
            "message": "Missing item type\nMerge two objects, and merge any properties that are objects\ninstead of just overwriting one. Uses to merge options hashes\nwhere deeper default settings are important.",
            "line": " lib.js:97"
        },
        {
            "message": "Missing item type\nMake a copy of the supplied object",
            "line": " lib.js:129"
        },
        {
            "message": "Missing item type\nCheck if an object is plain, and not a dom node or any object sub-instance",
            "line": " lib.js:138"
        },
        {
            "message": "Missing item type\nBind (a.k.a proxy or Context). A simple method for changing the context of a function\n  It also stores a unique id on the function so it can be easily removed from events",
            "line": " lib.js:150"
        },
        {
            "message": "Missing item type\nElement Data Store. Allows for binding data to an element without putting it directly on the element.\nEx. Event listneres are stored here.\n(also from jsninja.com, slightly modified and updated for closure compiler)",
            "line": " lib.js:178"
        },
        {
            "message": "Missing item type\nUnique ID for an element or function",
            "line": " lib.js:186"
        },
        {
            "message": "Missing item type\nUnique attribute name to store an element's guid in",
            "line": " lib.js:192"
        },
        {
            "message": "Missing item type\nReturns the cache object where data for an element is stored",
            "line": " lib.js:199"
        },
        {
            "message": "Missing item type\nReturns the cache object where data for an element is stored",
            "line": " lib.js:213"
        },
        {
            "message": "Missing item type\nDelete data for the element from the cache and the guid attr from getElementById",
            "line": " lib.js:223"
        },
        {
            "message": "Missing item type\nAdd a CSS class name to an element",
            "line": " lib.js:259"
        },
        {
            "message": "Missing item type\nRemove a CSS class name from an element",
            "line": " lib.js:270"
        },
        {
            "message": "Missing item type\nElement for testing browser HTML5 video capabilities",
            "line": " lib.js:288"
        },
        {
            "message": "Missing item type\nUseragent for browser testing.",
            "line": " lib.js:295"
        },
        {
            "message": "Missing item type\nDevice is an iPhone",
            "line": " lib.js:302"
        },
        {
            "message": "Missing item type\nGet an element's attribute values, as defined on the HTML tag\nAttributs are not the same as properties. They're defined on the tag\nor with setAttribute (which shouldn't be used with HTML)\nThis will return true or false for boolean attributes.",
            "line": " lib.js:348"
        },
        {
            "message": "Missing item type\nGet the computed style value for an element\nFrom http://robertnyman.com/2006/04/24/get-the-rendered-style-of-an-element/",
            "line": " lib.js:389"
        },
        {
            "message": "Missing item type\nInsert an element as the first child node of another",
            "line": " lib.js:408"
        },
        {
            "message": "Missing item type\nObject to hold browser support information",
            "line": " lib.js:421"
        },
        {
            "message": "Missing item type\nShorthand for document.getElementById()\nAlso allows for CSS (jQuery) ID syntax. But nothing other than IDs.",
            "line": " lib.js:427"
        },
        {
            "message": "Missing item type\nFormat seconds as a time string, H:MM:SS or M:SS\nSupplying a guide (in seconds) will force a number of leading zeros\nto cover the length of the guide",
            "line": " lib.js:441"
        },
        {
            "message": "Missing item type\nTrim whitespace from the ends of a string.",
            "line": " lib.js:478"
        },
        {
            "message": "Missing item type\nShould round off a number to a decimal place",
            "line": " lib.js:487"
        },
        {
            "message": "Missing item type\nShould create a fake TimeRange object\nMimics an HTML5 time range instance, which has functions that\nreturn the start and end times for a range\nTimeRanges are returned by the buffered() method",
            "line": " lib.js:498"
        },
        {
            "message": "Missing item type\nSimple http request for retrieving external files (e.g. text tracks)",
            "line": " lib.js:515"
        },
        {
            "message": "Missing item type\nGet abosolute version of relative URL. Used to tell flash correct URL.\nhttp://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue",
            "line": " lib.js:583"
        },
        {
            "message": "Missing item type\nLoading spinner for waiting events",
            "line": " loading-spinner.js:3"
        },
        {
            "message": "Missing item type",
            "line": " loading-spinner.js:10"
        },
        {
            "message": "Missing item type\nThe base for text track and settings menu buttons.",
            "line": " menu.js:3"
        },
        {
            "message": "Missing item type\nAdd a menu item to the menu",
            "line": " menu.js:11"
        },
        {
            "message": "Missing item type",
            "line": " menu.js:22"
        },
        {
            "message": "Missing item type\nMenu item",
            "line": " menu.js:44"
        },
        {
            "message": "Missing item type",
            "line": " menu.js:51"
        },
        {
            "message": "Missing item type",
            "line": " menu.js:58"
        },
        {
            "message": "Missing item type",
            "line": " menu.js:66"
        },
        {
            "message": "Missing item type\nSet this menu item as selected or not",
            "line": " menu.js:71"
        },
        {
            "message": "Missing item type\nA button class with a popup menu",
            "line": " menu.js:86"
        },
        {
            "message": "Missing item type",
            "line": " menu.js:93"
        },
        {
            "message": "Missing item type\nTrack the state of the menu button",
            "line": " menu.js:113"
        },
        {
            "message": "Missing item type\nCreate the list of menu items. Specific to each subclass.",
            "line": " menu.js:143"
        },
        {
            "message": "Missing item type",
            "line": " menu.js:148"
        },
        {
            "message": "Missing item type\nPlayer instance options, surfaced using vjs.options\nvjs.options = vjs.Player.prototype.options_\nMake changes in vjs.options, not here.\nAll options should use string keys so they avoid\nrenaming by closure compiler",
            "line": " player.js:109"
        },
        {
            "message": "Missing item type\nObject for cached values.",
            "line": " player.js:449"
        },
        {
            "message": "Missing item type\nstart media playback\n\n##### EXAMPLE:\n\n```js\n  myPlayer.play();\n```",
            "line": " player.js:513"
        },
        {
            "message": "Missing item type\nthe url of the poster image source",
            "line": " player.js:858"
        },
        {
            "message": "Missing item type\nget or set the poster image source url\n\n##### EXAMPLE:\n\n    // getting\n    var currentPoster = myPlayer.poster();\n\n    // setting\n    myPlayer.poster('http://example.com/myImage.jpg');",
            "line": " player.js:865"
        },
        {
            "message": "Missing item type\nWhether or not the controls are showing",
            "line": " player.js:888"
        },
        {
            "message": "Missing item type\nGet or set whether or not the controls are showing.",
            "line": " player.js:895"
        },
        {
            "message": "Missing item type\nToggle native controls on/off. Native controls are the controls built into\ndevices (e.g. default iPhone controls), Flash, or other techs\n(e.g. Vimeo Controls)\n\n**This should only be set by the current tech, because only the tech knows\nif it can support native controls**",
            "line": " player.js:923"
        },
        {
            "message": "Missing item type\nPoster image. Shows before the video plays.",
            "line": " poster.js:3"
        },
        {
            "message": "Missing item type",
            "line": " poster.js:10"
        },
        {
            "message": "Missing item type",
            "line": " setup.js:1"
        },
        {
            "message": "Missing item type\nParent for seek bar and volume slider",
            "line": " slider.js:3"
        },
        {
            "message": "Missing item type",
            "line": " slider.js:10"
        },
        {
            "message": "Missing item type\nListener for click events on slider, used to prevent clicks\n  from bubbling up to parent elements like button menus.",
            "line": " slider.js:194"
        },
        {
            "message": "Missing item type\nSeekBar Behavior includes play progress bar, and seek handle\nNeeded so it can determine seek position based on handle position/size",
            "line": " slider.js:204"
        },
        {
            "message": "Missing item type\nDefault value of the slider",
            "line": " slider.js:213"
        },
        {
            "message": "Missing item type",
            "line": " slider.js:219"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:1"
        },
        {
            "message": "Missing item type\nList of associated text tracks",
            "line": " tracks.js:12"
        },
        {
            "message": "Missing item type\nGet an array of associated text tracks. captions, subtitles, chapters, descriptions\nhttp://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks",
            "line": " tracks.js:19"
        },
        {
            "message": "Missing item type\nAdd a text track\nIn addition to the W3C settings we allow adding additional info through options.\nhttp://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack",
            "line": " tracks.js:29"
        },
        {
            "message": "Missing item type\nAdd an array of text tracks. captions, subtitles, chapters, descriptions\nTrack objects will be stored in the player.textTracks() array",
            "line": " tracks.js:66"
        },
        {
            "message": "Missing item type\nTrack Class\nContains track methods for loading, showing, parsing cues of tracks",
            "line": " tracks.js:114"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:122"
        },
        {
            "message": "Missing item type\nTrack kind value. Captions, subtitles, etc.",
            "line": " tracks.js:146"
        },
        {
            "message": "Missing item type\nGet the track kind value",
            "line": " tracks.js:152"
        },
        {
            "message": "Missing item type\nTrack src value",
            "line": " tracks.js:160"
        },
        {
            "message": "Missing item type\nGet the track src value",
            "line": " tracks.js:166"
        },
        {
            "message": "Missing item type\nTrack default value\nIf default is used, subtitles/captions to start showing",
            "line": " tracks.js:174"
        },
        {
            "message": "Missing item type\nGet the track default value\n'default' is a reserved keyword",
            "line": " tracks.js:181"
        },
        {
            "message": "Missing item type\nTrack title value",
            "line": " tracks.js:190"
        },
        {
            "message": "Missing item type\nGet the track title value",
            "line": " tracks.js:196"
        },
        {
            "message": "Missing item type\nLanguage - two letter string to represent track language, e.g. 'en' for English\nSpec def: readonly attribute DOMString language;",
            "line": " tracks.js:204"
        },
        {
            "message": "Missing item type\nGet the track language value",
            "line": " tracks.js:211"
        },
        {
            "message": "Missing item type\nTrack label e.g. 'English'\nSpec def: readonly attribute DOMString label;",
            "line": " tracks.js:219"
        },
        {
            "message": "Missing item type\nGet the track label value",
            "line": " tracks.js:226"
        },
        {
            "message": "Missing item type\nAll cues of the track. Cues have a startTime, endTime, text, and other properties.\nSpec def: readonly attribute TextTrackCueList cues;",
            "line": " tracks.js:234"
        },
        {
            "message": "Missing item type\nGet the track cues",
            "line": " tracks.js:241"
        },
        {
            "message": "Missing item type\nActiveCues is all cues that are currently showing\nSpec def: readonly attribute TextTrackCueList activeCues;",
            "line": " tracks.js:249"
        },
        {
            "message": "Missing item type\nGet the track active cues",
            "line": " tracks.js:256"
        },
        {
            "message": "Missing item type\nReadyState describes if the text file has been loaded\nconst unsigned short NONE = 0;\nconst unsigned short LOADING = 1;\nconst unsigned short LOADED = 2;\nconst unsigned short ERROR = 3;\nreadonly attribute unsigned short readyState;",
            "line": " tracks.js:264"
        },
        {
            "message": "Missing item type\nGet the track readyState",
            "line": " tracks.js:275"
        },
        {
            "message": "Missing item type\nMode describes if the track is showing, hidden, or disabled\nconst unsigned short OFF = 0;\nconst unsigned short HIDDEN = 1; (still triggering cuechange events, but not visible)\nconst unsigned short SHOWING = 2;\nattribute unsigned short mode;",
            "line": " tracks.js:283"
        },
        {
            "message": "Missing item type\nGet the track mode",
            "line": " tracks.js:293"
        },
        {
            "message": "Missing item type\nChange the font size of the text track to make it larger when playing in fullscreen mode\nand restore it to its normal size when not in fullscreen mode.",
            "line": " tracks.js:301"
        },
        {
            "message": "Missing item type\nCreate basic div to hold cue text",
            "line": " tracks.js:317"
        },
        {
            "message": "Missing item type\nShow: Mode Showing (2)\nIndicates that the text track is active. If no attempt has yet been made to obtain the track's cues, the user agent will perform such an attempt momentarily.\nThe user agent is maintaining a list of which cues are active, and events are being fired accordingly.\nIn addition, for text tracks whose kind is subtitles or captions, the cues are being displayed over the video as appropriate;\nfor text tracks whose kind is descriptions, the user agent is making the cues available to the user in a non-visual fashion;\nand for text tracks whose kind is chapters, the user agent is making available to the user a mechanism by which the user can navigate to any point in the media resource by selecting a cue.\nThe showing by default state is used in conjunction with the default attribute on track elements to indicate that the text track was enabled due to that attribute.\nThis allows the user agent to override the state if a later track is discovered that is more appropriate per the user's preferences.",
            "line": " tracks.js:327"
        },
        {
            "message": "Missing item type\nHide: Mode Hidden (1)\nIndicates that the text track is active, but that the user agent is not actively displaying the cues.\nIf no attempt has yet been made to obtain the track's cues, the user agent will perform such an attempt momentarily.\nThe user agent is maintaining a list of which cues are active, and events are being fired accordingly.",
            "line": " tracks.js:346"
        },
        {
            "message": "Missing item type\nDisable: Mode Off/Disable (0)\nIndicates that the text track is not active. Other than for the purposes of exposing the track in the DOM, the user agent is ignoring the text track.\nNo cues are active, no events are fired, and the user agent will not attempt to obtain the track's cues.",
            "line": " tracks.js:362"
        },
        {
            "message": "Missing item type\nTurn on cue tracking. Tracks that are showing OR hidden are active.",
            "line": " tracks.js:378"
        },
        {
            "message": "Missing item type\nTurn off cue tracking.",
            "line": " tracks.js:401"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:670"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:678"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:684"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:695"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:699"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:722"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:726"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:748"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:752"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:790"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:794"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:848"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:852"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:862"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:866"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:878"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:882"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:964"
        },
        {
            "message": "Missing item type",
            "line": " tracks.js:968"
        }
    ]
}